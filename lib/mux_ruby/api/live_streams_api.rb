=begin
# Mux Ruby - Copyright 2019 Mux Inc.
# NOTE: This file is auto generated. Do not edit this file manually.
=end

require 'uri'

module MuxRuby
  class LiveStreamsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a live stream
    # @param create_live_stream_request 
    # @param [Hash] opts the optional parameters
    # @return [LiveStreamResponse]
    def create_live_stream(create_live_stream_request, opts = {})
      data, _status_code, _headers = create_live_stream_with_http_info(create_live_stream_request, opts)
      data
    end

    # Create a live stream
    # @param create_live_stream_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LiveStreamResponse, Fixnum, Hash)>] LiveStreamResponse data, response status code and response headers
    def create_live_stream_with_http_info(create_live_stream_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveStreamsApi.create_live_stream ...'
      end
      # verify the required parameter 'create_live_stream_request' is set
      if @api_client.config.client_side_validation && create_live_stream_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_live_stream_request' when calling LiveStreamsApi.create_live_stream"
      end
      # resource path
      local_var_path = '/video/v1/live-streams'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_live_stream_request)
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveStreamResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveStreamsApi#create_live_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a live stream playback ID
    # @param live_stream_id The live stream ID
    # @param create_playback_id_request 
    # @param [Hash] opts the optional parameters
    # @return [CreatePlaybackIDResponse]
    def create_live_stream_playback_id(live_stream_id, create_playback_id_request, opts = {})
      data, _status_code, _headers = create_live_stream_playback_id_with_http_info(live_stream_id, create_playback_id_request, opts)
      data
    end

    # Create a live stream playback ID
    # @param live_stream_id The live stream ID
    # @param create_playback_id_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePlaybackIDResponse, Fixnum, Hash)>] CreatePlaybackIDResponse data, response status code and response headers
    def create_live_stream_playback_id_with_http_info(live_stream_id, create_playback_id_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveStreamsApi.create_live_stream_playback_id ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveStreamsApi.create_live_stream_playback_id"
      end
      # verify the required parameter 'create_playback_id_request' is set
      if @api_client.config.client_side_validation && create_playback_id_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_playback_id_request' when calling LiveStreamsApi.create_live_stream_playback_id"
      end
      # resource path
      local_var_path = '/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids'.sub('{' + 'LIVE_STREAM_ID' + '}', live_stream_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_playback_id_request)
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatePlaybackIDResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveStreamsApi#create_live_stream_playback_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a live stream simulcast target
    # Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
    # @param live_stream_id The live stream ID
    # @param create_simulcast_target_request 
    # @param [Hash] opts the optional parameters
    # @return [SimulcastTargetResponse]
    def create_live_stream_simulcast_target(live_stream_id, create_simulcast_target_request, opts = {})
      data, _status_code, _headers = create_live_stream_simulcast_target_with_http_info(live_stream_id, create_simulcast_target_request, opts)
      data
    end

    # Create a live stream simulcast target
    # Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
    # @param live_stream_id The live stream ID
    # @param create_simulcast_target_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimulcastTargetResponse, Fixnum, Hash)>] SimulcastTargetResponse data, response status code and response headers
    def create_live_stream_simulcast_target_with_http_info(live_stream_id, create_simulcast_target_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveStreamsApi.create_live_stream_simulcast_target ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveStreamsApi.create_live_stream_simulcast_target"
      end
      # verify the required parameter 'create_simulcast_target_request' is set
      if @api_client.config.client_side_validation && create_simulcast_target_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_simulcast_target_request' when calling LiveStreamsApi.create_live_stream_simulcast_target"
      end
      # resource path
      local_var_path = '/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets'.sub('{' + 'LIVE_STREAM_ID' + '}', live_stream_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_simulcast_target_request)
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SimulcastTargetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveStreamsApi#create_live_stream_simulcast_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a live stream
    # @param live_stream_id The live stream ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_live_stream(live_stream_id, opts = {})
      delete_live_stream_with_http_info(live_stream_id, opts)
      nil
    end

    # Delete a live stream
    # @param live_stream_id The live stream ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_live_stream_with_http_info(live_stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveStreamsApi.delete_live_stream ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveStreamsApi.delete_live_stream"
      end
      # resource path
      local_var_path = '/video/v1/live-streams/{LIVE_STREAM_ID}'.sub('{' + 'LIVE_STREAM_ID' + '}', live_stream_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveStreamsApi#delete_live_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a live stream playback ID
    # @param live_stream_id The live stream ID
    # @param playback_id The live stream&#39;s playback ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_live_stream_playback_id(live_stream_id, playback_id, opts = {})
      delete_live_stream_playback_id_with_http_info(live_stream_id, playback_id, opts)
      nil
    end

    # Delete a live stream playback ID
    # @param live_stream_id The live stream ID
    # @param playback_id The live stream&#39;s playback ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_live_stream_playback_id_with_http_info(live_stream_id, playback_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveStreamsApi.delete_live_stream_playback_id ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveStreamsApi.delete_live_stream_playback_id"
      end
      # verify the required parameter 'playback_id' is set
      if @api_client.config.client_side_validation && playback_id.nil?
        fail ArgumentError, "Missing the required parameter 'playback_id' when calling LiveStreamsApi.delete_live_stream_playback_id"
      end
      # resource path
      local_var_path = '/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids/{PLAYBACK_ID}'.sub('{' + 'LIVE_STREAM_ID' + '}', live_stream_id.to_s).sub('{' + 'PLAYBACK_ID' + '}', playback_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveStreamsApi#delete_live_stream_playback_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Live Stream Simulcast Target
    # Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
    # @param live_stream_id The live stream ID
    # @param simulcast_target_id The ID of the simulcast target.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_live_stream_simulcast_target(live_stream_id, simulcast_target_id, opts = {})
      delete_live_stream_simulcast_target_with_http_info(live_stream_id, simulcast_target_id, opts)
      nil
    end

    # Delete a Live Stream Simulcast Target
    # Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
    # @param live_stream_id The live stream ID
    # @param simulcast_target_id The ID of the simulcast target.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_live_stream_simulcast_target_with_http_info(live_stream_id, simulcast_target_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveStreamsApi.delete_live_stream_simulcast_target ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveStreamsApi.delete_live_stream_simulcast_target"
      end
      # verify the required parameter 'simulcast_target_id' is set
      if @api_client.config.client_side_validation && simulcast_target_id.nil?
        fail ArgumentError, "Missing the required parameter 'simulcast_target_id' when calling LiveStreamsApi.delete_live_stream_simulcast_target"
      end
      # resource path
      local_var_path = '/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}'.sub('{' + 'LIVE_STREAM_ID' + '}', live_stream_id.to_s).sub('{' + 'SIMULCAST_TARGET_ID' + '}', simulcast_target_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveStreamsApi#delete_live_stream_simulcast_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a live stream
    # Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
    # @param live_stream_id The live stream ID
    # @param [Hash] opts the optional parameters
    # @return [LiveStreamResponse]
    def get_live_stream(live_stream_id, opts = {})
      data, _status_code, _headers = get_live_stream_with_http_info(live_stream_id, opts)
      data
    end

    # Retrieve a live stream
    # Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
    # @param live_stream_id The live stream ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LiveStreamResponse, Fixnum, Hash)>] LiveStreamResponse data, response status code and response headers
    def get_live_stream_with_http_info(live_stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveStreamsApi.get_live_stream ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveStreamsApi.get_live_stream"
      end
      # resource path
      local_var_path = '/video/v1/live-streams/{LIVE_STREAM_ID}'.sub('{' + 'LIVE_STREAM_ID' + '}', live_stream_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveStreamResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveStreamsApi#get_live_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Live Stream Simulcast Target
    # Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
    # @param live_stream_id The live stream ID
    # @param simulcast_target_id The ID of the simulcast target.
    # @param [Hash] opts the optional parameters
    # @return [SimulcastTargetResponse]
    def get_live_stream_simulcast_target(live_stream_id, simulcast_target_id, opts = {})
      data, _status_code, _headers = get_live_stream_simulcast_target_with_http_info(live_stream_id, simulcast_target_id, opts)
      data
    end

    # Retrieve a Live Stream Simulcast Target
    # Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
    # @param live_stream_id The live stream ID
    # @param simulcast_target_id The ID of the simulcast target.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimulcastTargetResponse, Fixnum, Hash)>] SimulcastTargetResponse data, response status code and response headers
    def get_live_stream_simulcast_target_with_http_info(live_stream_id, simulcast_target_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveStreamsApi.get_live_stream_simulcast_target ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveStreamsApi.get_live_stream_simulcast_target"
      end
      # verify the required parameter 'simulcast_target_id' is set
      if @api_client.config.client_side_validation && simulcast_target_id.nil?
        fail ArgumentError, "Missing the required parameter 'simulcast_target_id' when calling LiveStreamsApi.get_live_stream_simulcast_target"
      end
      # resource path
      local_var_path = '/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}'.sub('{' + 'LIVE_STREAM_ID' + '}', live_stream_id.to_s).sub('{' + 'SIMULCAST_TARGET_ID' + '}', simulcast_target_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SimulcastTargetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveStreamsApi#get_live_stream_simulcast_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List live streams
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of items to include in the response (default to 25)
    # @option opts [Integer] :page Offset by this many pages, of the size of &#x60;limit&#x60; (default to 1)
    # @return [ListLiveStreamsResponse]
    def list_live_streams(opts = {})
      data, _status_code, _headers = list_live_streams_with_http_info(opts)
      data
    end

    # List live streams
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of items to include in the response
    # @option opts [Integer] :page Offset by this many pages, of the size of &#x60;limit&#x60;
    # @return [Array<(ListLiveStreamsResponse, Fixnum, Hash)>] ListLiveStreamsResponse data, response status code and response headers
    def list_live_streams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveStreamsApi.list_live_streams ...'
      end
      # resource path
      local_var_path = '/video/v1/live-streams'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListLiveStreamsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveStreamsApi#list_live_streams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset a live stream’s stream key
    # Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
    # @param live_stream_id The live stream ID
    # @param [Hash] opts the optional parameters
    # @return [LiveStreamResponse]
    def reset_stream_key(live_stream_id, opts = {})
      data, _status_code, _headers = reset_stream_key_with_http_info(live_stream_id, opts)
      data
    end

    # Reset a live stream’s stream key
    # Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
    # @param live_stream_id The live stream ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LiveStreamResponse, Fixnum, Hash)>] LiveStreamResponse data, response status code and response headers
    def reset_stream_key_with_http_info(live_stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveStreamsApi.reset_stream_key ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveStreamsApi.reset_stream_key"
      end
      # resource path
      local_var_path = '/video/v1/live-streams/{LIVE_STREAM_ID}/reset-stream-key'.sub('{' + 'LIVE_STREAM_ID' + '}', live_stream_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LiveStreamResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveStreamsApi#reset_stream_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Signal a live stream is finished
    # (Optional) Make the recorded asset available immediately instead of waiting for the reconnect_window.
    # @param live_stream_id The live stream ID
    # @param [Hash] opts the optional parameters
    # @return [SignalLiveStreamCompleteResponse]
    def signal_live_stream_complete(live_stream_id, opts = {})
      data, _status_code, _headers = signal_live_stream_complete_with_http_info(live_stream_id, opts)
      data
    end

    # Signal a live stream is finished
    # (Optional) Make the recorded asset available immediately instead of waiting for the reconnect_window.
    # @param live_stream_id The live stream ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignalLiveStreamCompleteResponse, Fixnum, Hash)>] SignalLiveStreamCompleteResponse data, response status code and response headers
    def signal_live_stream_complete_with_http_info(live_stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveStreamsApi.signal_live_stream_complete ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveStreamsApi.signal_live_stream_complete"
      end
      # resource path
      local_var_path = '/video/v1/live-streams/{LIVE_STREAM_ID}/complete'.sub('{' + 'LIVE_STREAM_ID' + '}', live_stream_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SignalLiveStreamCompleteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveStreamsApi#signal_live_stream_complete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
