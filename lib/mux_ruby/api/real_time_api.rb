=begin
# Mux Ruby - Copyright 2019 Mux Inc.
# NOTE: This file is auto generated. Do not edit this file manually.
=end

require 'uri'

module MuxRuby
  class RealTimeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Real-Time Breakdown
    # Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. 
    # @param realtime_metric_id ID of the Realtime Metric
    # @param [Hash] opts the optional parameters
    # @option opts [String] :dimension Dimension the specified value belongs to
    # @option opts [Float] :timestamp Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp.
    # @option opts [Array<String>] :filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint. 
    # @option opts [String] :order_by Value to order the results by
    # @option opts [String] :order_direction Sort order.
    # @return [GetRealTimeBreakdownResponse]
    def get_realtime_breakdown(realtime_metric_id, opts = {})
      data, _status_code, _headers = get_realtime_breakdown_with_http_info(realtime_metric_id, opts)
      data
    end

    # Get Real-Time Breakdown
    # Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. 
    # @param realtime_metric_id ID of the Realtime Metric
    # @param [Hash] opts the optional parameters
    # @option opts [String] :dimension Dimension the specified value belongs to
    # @option opts [Float] :timestamp Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp.
    # @option opts [Array<String>] :filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint. 
    # @option opts [String] :order_by Value to order the results by
    # @option opts [String] :order_direction Sort order.
    # @return [Array<(GetRealTimeBreakdownResponse, Fixnum, Hash)>] GetRealTimeBreakdownResponse data, response status code and response headers
    def get_realtime_breakdown_with_http_info(realtime_metric_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeApi.get_realtime_breakdown ...'
      end
      # verify the required parameter 'realtime_metric_id' is set
      if @api_client.config.client_side_validation && realtime_metric_id.nil?
        fail ArgumentError, "Missing the required parameter 'realtime_metric_id' when calling RealTimeApi.get_realtime_breakdown"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['current-average-bitrate', 'current-concurrent-viewers', 'current-rebuffering-percentage', 'exits-before-video-start', 'playback-failure-percentage', 'video-startup-time'].include?(realtime_metric_id)
        fail ArgumentError, "invalid value for 'realtime_metric_id', must be one of current-average-bitrate, current-concurrent-viewers, current-rebuffering-percentage, exits-before-video-start, playback-failure-percentage, video-startup-time"
      end
      if @api_client.config.client_side_validation && opts[:'dimension'] && !['asn', 'cdn', 'country', 'operating_system', 'player_name', 'region', 'stream_type', 'sub_property_id', 'video_series', 'video_title'].include?(opts[:'dimension'])
        fail ArgumentError, 'invalid value for "dimension", must be one of asn, cdn, country, operating_system, player_name, region, stream_type, sub_property_id, video_series, video_title'
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['negative_impact', 'value', 'views', 'field'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of negative_impact, value, views, field'
      end
      if @api_client.config.client_side_validation && opts[:'order_direction'] && !['asc', 'desc'].include?(opts[:'order_direction'])
        fail ArgumentError, 'invalid value for "order_direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/data/v1/realtime/metrics/{REALTIME_METRIC_ID}/breakdown'.sub('{' + 'REALTIME_METRIC_ID' + '}', realtime_metric_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'dimension'] = opts[:'dimension'] if !opts[:'dimension'].nil?
      query_params[:'timestamp'] = opts[:'timestamp'] if !opts[:'timestamp'].nil?
      query_params[:'filters[]'] = @api_client.build_collection_param(opts[:'filters'], :multi) if !opts[:'filters'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order_direction'] = opts[:'order_direction'] if !opts[:'order_direction'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetRealTimeBreakdownResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeApi#get_realtime_breakdown\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Real-Time Histogram Timeseries
    # Gets histogram timeseries information for a specific metric. 
    # @param realtime_metric_id ID of the Realtime Metric
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint. 
    # @return [GetRealTimeHistogramTimeseriesResponse]
    def get_realtime_histogram_timeseries(realtime_metric_id, opts = {})
      data, _status_code, _headers = get_realtime_histogram_timeseries_with_http_info(realtime_metric_id, opts)
      data
    end

    # Get Real-Time Histogram Timeseries
    # Gets histogram timeseries information for a specific metric. 
    # @param realtime_metric_id ID of the Realtime Metric
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint. 
    # @return [Array<(GetRealTimeHistogramTimeseriesResponse, Fixnum, Hash)>] GetRealTimeHistogramTimeseriesResponse data, response status code and response headers
    def get_realtime_histogram_timeseries_with_http_info(realtime_metric_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeApi.get_realtime_histogram_timeseries ...'
      end
      # verify the required parameter 'realtime_metric_id' is set
      if @api_client.config.client_side_validation && realtime_metric_id.nil?
        fail ArgumentError, "Missing the required parameter 'realtime_metric_id' when calling RealTimeApi.get_realtime_histogram_timeseries"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['current-average-bitrate', 'current-concurrent-viewers', 'current-rebuffering-percentage', 'exits-before-video-start', 'playback-failure-percentage', 'video-startup-time'].include?(realtime_metric_id)
        fail ArgumentError, "invalid value for 'realtime_metric_id', must be one of current-average-bitrate, current-concurrent-viewers, current-rebuffering-percentage, exits-before-video-start, playback-failure-percentage, video-startup-time"
      end
      # resource path
      local_var_path = '/data/v1/realtime/metrics/{REALTIME_METRIC_ID}/histogram-timeseries'.sub('{' + 'REALTIME_METRIC_ID' + '}', realtime_metric_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filters[]'] = @api_client.build_collection_param(opts[:'filters'], :multi) if !opts[:'filters'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetRealTimeHistogramTimeseriesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeApi#get_realtime_histogram_timeseries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Real-Time Timeseries
    # Gets Time series information for a specific metric along with the number of concurrent viewers. 
    # @param realtime_metric_id ID of the Realtime Metric
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint. 
    # @return [GetRealTimeTimeseriesResponse]
    def get_realtime_timeseries(realtime_metric_id, opts = {})
      data, _status_code, _headers = get_realtime_timeseries_with_http_info(realtime_metric_id, opts)
      data
    end

    # Get Real-Time Timeseries
    # Gets Time series information for a specific metric along with the number of concurrent viewers. 
    # @param realtime_metric_id ID of the Realtime Metric
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :filters Filter key:value pairs. Must be provided as an array query string parameter (e.g. filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;country:US).  Possible filter names are the same as returned by the List Filters endpoint. 
    # @return [Array<(GetRealTimeTimeseriesResponse, Fixnum, Hash)>] GetRealTimeTimeseriesResponse data, response status code and response headers
    def get_realtime_timeseries_with_http_info(realtime_metric_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeApi.get_realtime_timeseries ...'
      end
      # verify the required parameter 'realtime_metric_id' is set
      if @api_client.config.client_side_validation && realtime_metric_id.nil?
        fail ArgumentError, "Missing the required parameter 'realtime_metric_id' when calling RealTimeApi.get_realtime_timeseries"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['current-average-bitrate', 'current-concurrent-viewers', 'current-rebuffering-percentage', 'exits-before-video-start', 'playback-failure-percentage', 'video-startup-time'].include?(realtime_metric_id)
        fail ArgumentError, "invalid value for 'realtime_metric_id', must be one of current-average-bitrate, current-concurrent-viewers, current-rebuffering-percentage, exits-before-video-start, playback-failure-percentage, video-startup-time"
      end
      # resource path
      local_var_path = '/data/v1/realtime/metrics/{REALTIME_METRIC_ID}/timeseries'.sub('{' + 'REALTIME_METRIC_ID' + '}', realtime_metric_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filters[]'] = @api_client.build_collection_param(opts[:'filters'], :multi) if !opts[:'filters'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetRealTimeTimeseriesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeApi#get_realtime_timeseries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Real-Time Dimensions
    # Lists availiable real-time dimensions 
    # @param [Hash] opts the optional parameters
    # @return [ListRealTimeDimensionsResponse]
    def list_realtime_dimensions(opts = {})
      data, _status_code, _headers = list_realtime_dimensions_with_http_info(opts)
      data
    end

    # List Real-Time Dimensions
    # Lists availiable real-time dimensions 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListRealTimeDimensionsResponse, Fixnum, Hash)>] ListRealTimeDimensionsResponse data, response status code and response headers
    def list_realtime_dimensions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeApi.list_realtime_dimensions ...'
      end
      # resource path
      local_var_path = '/data/v1/realtime/dimensions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListRealTimeDimensionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeApi#list_realtime_dimensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Real-Time Metrics
    # Lists availiable real-time metrics. 
    # @param [Hash] opts the optional parameters
    # @return [ListRealTimeMetricsResponse]
    def list_realtime_metrics(opts = {})
      data, _status_code, _headers = list_realtime_metrics_with_http_info(opts)
      data
    end

    # List Real-Time Metrics
    # Lists availiable real-time metrics. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListRealTimeMetricsResponse, Fixnum, Hash)>] ListRealTimeMetricsResponse data, response status code and response headers
    def list_realtime_metrics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealTimeApi.list_realtime_metrics ...'
      end
      # resource path
      local_var_path = '/data/v1/realtime/metrics'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListRealTimeMetricsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealTimeApi#list_realtime_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
