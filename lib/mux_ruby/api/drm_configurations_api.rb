=begin
#Mux API

#Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

The version of the OpenAPI document: v1
Contact: devex@mux.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'cgi'

module MuxRuby
  class DRMConfigurationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve a DRM Configuration
    # Retrieves a single DRM Configuration.
    # @param drm_configuration_id [String] The DRM Configuration ID.
    # @param [Hash] opts the optional parameters
    # @return [DRMConfigurationResponse]
    def get_drm_configuration(drm_configuration_id, opts = {})
      data, _status_code, _headers = get_drm_configuration_with_http_info(drm_configuration_id, opts)
      data
    end

    # Retrieve a DRM Configuration
    # Retrieves a single DRM Configuration.
    # @param drm_configuration_id [String] The DRM Configuration ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DRMConfigurationResponse, Integer, Hash)>] DRMConfigurationResponse data, response status code and response headers
    def get_drm_configuration_with_http_info(drm_configuration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DRMConfigurationsApi.get_drm_configuration ...'
      end
      # verify the required parameter 'drm_configuration_id' is set
      if @api_client.config.client_side_validation && drm_configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'drm_configuration_id' when calling DRMConfigurationsApi.get_drm_configuration"
      end
      # resource path
      local_var_path = '/video/v1/drm-configurations/{DRM_CONFIGURATION_ID}'.sub('{' + 'DRM_CONFIGURATION_ID' + '}', CGI.escape(drm_configuration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DRMConfigurationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"DRMConfigurationsApi.get_drm_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DRMConfigurationsApi#get_drm_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List DRM Configurations
    # Returns a list of DRM Configurations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Offset by this many pages, of the size of &#x60;limit&#x60; (default to 1)
    # @option opts [Integer] :limit Number of items to include in the response (default to 25)
    # @return [ListDRMConfigurationsResponse]
    def list_drm_configurations(opts = {})
      data, _status_code, _headers = list_drm_configurations_with_http_info(opts)
      data
    end

    # List DRM Configurations
    # Returns a list of DRM Configurations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Offset by this many pages, of the size of &#x60;limit&#x60;
    # @option opts [Integer] :limit Number of items to include in the response
    # @return [Array<(ListDRMConfigurationsResponse, Integer, Hash)>] ListDRMConfigurationsResponse data, response status code and response headers
    def list_drm_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DRMConfigurationsApi.list_drm_configurations ...'
      end
      # resource path
      local_var_path = '/video/v1/drm-configurations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListDRMConfigurationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['accessToken']

      new_options = opts.merge(
        :operation => :"DRMConfigurationsApi.list_drm_configurations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DRMConfigurationsApi#list_drm_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
