=begin
#Mux API

#Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

The version of the OpenAPI document: v1
Contact: devex@mux.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'date'
require 'time'

module MuxRuby
  class Incident
    attr_accessor :threshold

    attr_accessor :status

    attr_accessor :started_at

    attr_accessor :severity

    attr_accessor :sample_size_unit

    attr_accessor :sample_size

    attr_accessor :resolved_at

    attr_accessor :notifications

    attr_accessor :notification_rules

    attr_accessor :measurement

    attr_accessor :measured_value_on_close

    attr_accessor :measured_value

    attr_accessor :incident_key

    attr_accessor :impact

    attr_accessor :id

    attr_accessor :error_description

    attr_accessor :description

    attr_accessor :breakdowns

    attr_accessor :affected_views_per_hour_on_open

    attr_accessor :affected_views_per_hour

    attr_accessor :affected_views

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'threshold' => :'threshold',
        :'status' => :'status',
        :'started_at' => :'started_at',
        :'severity' => :'severity',
        :'sample_size_unit' => :'sample_size_unit',
        :'sample_size' => :'sample_size',
        :'resolved_at' => :'resolved_at',
        :'notifications' => :'notifications',
        :'notification_rules' => :'notification_rules',
        :'measurement' => :'measurement',
        :'measured_value_on_close' => :'measured_value_on_close',
        :'measured_value' => :'measured_value',
        :'incident_key' => :'incident_key',
        :'impact' => :'impact',
        :'id' => :'id',
        :'error_description' => :'error_description',
        :'description' => :'description',
        :'breakdowns' => :'breakdowns',
        :'affected_views_per_hour_on_open' => :'affected_views_per_hour_on_open',
        :'affected_views_per_hour' => :'affected_views_per_hour',
        :'affected_views' => :'affected_views'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'threshold' => :'Float',
        :'status' => :'String',
        :'started_at' => :'String',
        :'severity' => :'String',
        :'sample_size_unit' => :'String',
        :'sample_size' => :'Integer',
        :'resolved_at' => :'String',
        :'notifications' => :'Array<IncidentNotification>',
        :'notification_rules' => :'Array<IncidentNotificationRule>',
        :'measurement' => :'String',
        :'measured_value_on_close' => :'Float',
        :'measured_value' => :'Float',
        :'incident_key' => :'String',
        :'impact' => :'String',
        :'id' => :'String',
        :'error_description' => :'String',
        :'description' => :'String',
        :'breakdowns' => :'Array<IncidentBreakdown>',
        :'affected_views_per_hour_on_open' => :'Integer',
        :'affected_views_per_hour' => :'Integer',
        :'affected_views' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'resolved_at',
        :'measured_value_on_close',
        :'measured_value',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MuxRuby::Incident` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MuxRuby::Incident`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'threshold')
        self.threshold = attributes[:'threshold']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.key?(:'sample_size_unit')
        self.sample_size_unit = attributes[:'sample_size_unit']
      end

      if attributes.key?(:'sample_size')
        self.sample_size = attributes[:'sample_size']
      end

      if attributes.key?(:'resolved_at')
        self.resolved_at = attributes[:'resolved_at']
      end

      if attributes.key?(:'notifications')
        if (value = attributes[:'notifications']).is_a?(Array)
          self.notifications = value
        end
      end

      if attributes.key?(:'notification_rules')
        if (value = attributes[:'notification_rules']).is_a?(Array)
          self.notification_rules = value
        end
      end

      if attributes.key?(:'measurement')
        self.measurement = attributes[:'measurement']
      end

      if attributes.key?(:'measured_value_on_close')
        self.measured_value_on_close = attributes[:'measured_value_on_close']
      end

      if attributes.key?(:'measured_value')
        self.measured_value = attributes[:'measured_value']
      end

      if attributes.key?(:'incident_key')
        self.incident_key = attributes[:'incident_key']
      end

      if attributes.key?(:'impact')
        self.impact = attributes[:'impact']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'error_description')
        self.error_description = attributes[:'error_description']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'breakdowns')
        if (value = attributes[:'breakdowns']).is_a?(Array)
          self.breakdowns = value
        end
      end

      if attributes.key?(:'affected_views_per_hour_on_open')
        self.affected_views_per_hour_on_open = attributes[:'affected_views_per_hour_on_open']
      end

      if attributes.key?(:'affected_views_per_hour')
        self.affected_views_per_hour = attributes[:'affected_views_per_hour']
      end

      if attributes.key?(:'affected_views')
        self.affected_views = attributes[:'affected_views']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          threshold == o.threshold &&
          status == o.status &&
          started_at == o.started_at &&
          severity == o.severity &&
          sample_size_unit == o.sample_size_unit &&
          sample_size == o.sample_size &&
          resolved_at == o.resolved_at &&
          notifications == o.notifications &&
          notification_rules == o.notification_rules &&
          measurement == o.measurement &&
          measured_value_on_close == o.measured_value_on_close &&
          measured_value == o.measured_value &&
          incident_key == o.incident_key &&
          impact == o.impact &&
          id == o.id &&
          error_description == o.error_description &&
          description == o.description &&
          breakdowns == o.breakdowns &&
          affected_views_per_hour_on_open == o.affected_views_per_hour_on_open &&
          affected_views_per_hour == o.affected_views_per_hour &&
          affected_views == o.affected_views
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [threshold, status, started_at, severity, sample_size_unit, sample_size, resolved_at, notifications, notification_rules, measurement, measured_value_on_close, measured_value, incident_key, impact, id, error_description, description, breakdowns, affected_views_per_hour_on_open, affected_views_per_hour, affected_views].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MuxRuby.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
