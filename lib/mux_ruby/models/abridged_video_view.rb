=begin
#Mux API

#Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.

The version of the OpenAPI document: v1
Contact: devex@mux.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'date'
require 'time'

module MuxRuby
  class AbridgedVideoView
    attr_accessor :id

    attr_accessor :viewer_os_family

    attr_accessor :viewer_application_name

    attr_accessor :video_title

    attr_accessor :total_row_count

    attr_accessor :player_error_message

    attr_accessor :player_error_code

    attr_accessor :error_type_id

    attr_accessor :country_code

    attr_accessor :view_start

    attr_accessor :view_end

    attr_accessor :viewer_experience_score

    attr_accessor :watch_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'viewer_os_family' => :'viewer_os_family',
        :'viewer_application_name' => :'viewer_application_name',
        :'video_title' => :'video_title',
        :'total_row_count' => :'total_row_count',
        :'player_error_message' => :'player_error_message',
        :'player_error_code' => :'player_error_code',
        :'error_type_id' => :'error_type_id',
        :'country_code' => :'country_code',
        :'view_start' => :'view_start',
        :'view_end' => :'view_end',
        :'viewer_experience_score' => :'viewer_experience_score',
        :'watch_time' => :'watch_time'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'viewer_os_family' => :'String',
        :'viewer_application_name' => :'String',
        :'video_title' => :'String',
        :'total_row_count' => :'Integer',
        :'player_error_message' => :'String',
        :'player_error_code' => :'String',
        :'error_type_id' => :'Integer',
        :'country_code' => :'String',
        :'view_start' => :'String',
        :'view_end' => :'String',
        :'viewer_experience_score' => :'Float',
        :'watch_time' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'viewer_os_family',
        :'viewer_application_name',
        :'video_title',
        :'player_error_message',
        :'player_error_code',
        :'error_type_id',
        :'country_code',
        :'viewer_experience_score',
        :'watch_time'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MuxRuby::AbridgedVideoView` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MuxRuby::AbridgedVideoView`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'viewer_os_family')
        self.viewer_os_family = attributes[:'viewer_os_family']
      end

      if attributes.key?(:'viewer_application_name')
        self.viewer_application_name = attributes[:'viewer_application_name']
      end

      if attributes.key?(:'video_title')
        self.video_title = attributes[:'video_title']
      end

      if attributes.key?(:'total_row_count')
        self.total_row_count = attributes[:'total_row_count']
      end

      if attributes.key?(:'player_error_message')
        self.player_error_message = attributes[:'player_error_message']
      end

      if attributes.key?(:'player_error_code')
        self.player_error_code = attributes[:'player_error_code']
      end

      if attributes.key?(:'error_type_id')
        self.error_type_id = attributes[:'error_type_id']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'view_start')
        self.view_start = attributes[:'view_start']
      end

      if attributes.key?(:'view_end')
        self.view_end = attributes[:'view_end']
      end

      if attributes.key?(:'viewer_experience_score')
        self.viewer_experience_score = attributes[:'viewer_experience_score']
      end

      if attributes.key?(:'watch_time')
        self.watch_time = attributes[:'watch_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          viewer_os_family == o.viewer_os_family &&
          viewer_application_name == o.viewer_application_name &&
          video_title == o.video_title &&
          total_row_count == o.total_row_count &&
          player_error_message == o.player_error_message &&
          player_error_code == o.player_error_code &&
          error_type_id == o.error_type_id &&
          country_code == o.country_code &&
          view_start == o.view_start &&
          view_end == o.view_end &&
          viewer_experience_score == o.viewer_experience_score &&
          watch_time == o.watch_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, viewer_os_family, viewer_application_name, video_title, total_row_count, player_error_message, player_error_code, error_type_id, country_code, view_start, view_end, viewer_experience_score, watch_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MuxRuby.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
