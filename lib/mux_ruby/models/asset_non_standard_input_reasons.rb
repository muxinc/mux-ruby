=begin
# Mux Ruby - Copyright 2019 Mux Inc.
# NOTE: This file is auto generated. Do not edit this file manually.
=end

require 'date'

module MuxRuby
  class AssetNonStandardInputReasons
    # The video codec used on the input file
    attr_accessor :video_codec

    # The audio codec used on the input file
    attr_accessor :audio_codec

    # The video key frame Interval (also called as Group of Picture or GOP) of the input file
    attr_accessor :video_gop_size

    # The video frame rate of the input file
    attr_accessor :video_frame_rate

    # The video resolution of the input file
    attr_accessor :video_resolution

    # The video pixel aspect ratio of the input file
    attr_accessor :pixel_aspect_ratio

    # Video Edit List reason indicates that the input file's video track contains a complex Edit Decision List
    attr_accessor :video_edit_list

    # Audio Edit List reason indicates that the input file's audio track contains a complex Edit Decision List
    attr_accessor :audio_edit_list

    # A catch-all reason when the input file in created with non-standard encoding parameters
    attr_accessor :unexpected_media_file_parameters

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'video_codec' => :'video_codec',
        :'audio_codec' => :'audio_codec',
        :'video_gop_size' => :'video_gop_size',
        :'video_frame_rate' => :'video_frame_rate',
        :'video_resolution' => :'video_resolution',
        :'pixel_aspect_ratio' => :'pixel_aspect_ratio',
        :'video_edit_list' => :'video_edit_list',
        :'audio_edit_list' => :'audio_edit_list',
        :'unexpected_media_file_parameters' => :'unexpected_media_file_parameters'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'video_codec' => :'String',
        :'audio_codec' => :'String',
        :'video_gop_size' => :'String',
        :'video_frame_rate' => :'String',
        :'video_resolution' => :'String',
        :'pixel_aspect_ratio' => :'String',
        :'video_edit_list' => :'String',
        :'audio_edit_list' => :'String',
        :'unexpected_media_file_parameters' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'video_codec')
        self.video_codec = attributes[:'video_codec']
      end

      if attributes.has_key?(:'audio_codec')
        self.audio_codec = attributes[:'audio_codec']
      end

      if attributes.has_key?(:'video_gop_size')
        self.video_gop_size = attributes[:'video_gop_size']
      end

      if attributes.has_key?(:'video_frame_rate')
        self.video_frame_rate = attributes[:'video_frame_rate']
      end

      if attributes.has_key?(:'video_resolution')
        self.video_resolution = attributes[:'video_resolution']
      end

      if attributes.has_key?(:'pixel_aspect_ratio')
        self.pixel_aspect_ratio = attributes[:'pixel_aspect_ratio']
      end

      if attributes.has_key?(:'video_edit_list')
        self.video_edit_list = attributes[:'video_edit_list']
      end

      if attributes.has_key?(:'audio_edit_list')
        self.audio_edit_list = attributes[:'audio_edit_list']
      end

      if attributes.has_key?(:'unexpected_media_file_parameters')
        self.unexpected_media_file_parameters = attributes[:'unexpected_media_file_parameters']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      video_gop_size_validator = EnumAttributeValidator.new('String', ['high'])
      return false unless video_gop_size_validator.valid?(@video_gop_size)
      video_edit_list_validator = EnumAttributeValidator.new('String', ['non-standard'])
      return false unless video_edit_list_validator.valid?(@video_edit_list)
      audio_edit_list_validator = EnumAttributeValidator.new('String', ['non-standard'])
      return false unless audio_edit_list_validator.valid?(@audio_edit_list)
      unexpected_media_file_parameters_validator = EnumAttributeValidator.new('String', ['non-standard'])
      return false unless unexpected_media_file_parameters_validator.valid?(@unexpected_media_file_parameters)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] video_gop_size Object to be assigned
    def video_gop_size=(video_gop_size)
      validator = EnumAttributeValidator.new('String', ['high'])
      unless validator.valid?(video_gop_size)
        fail ArgumentError, 'invalid value for "video_gop_size", must be one of #{validator.allowable_values}.'
      end
      @video_gop_size = video_gop_size
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] video_edit_list Object to be assigned
    def video_edit_list=(video_edit_list)
      validator = EnumAttributeValidator.new('String', ['non-standard'])
      unless validator.valid?(video_edit_list)
        fail ArgumentError, 'invalid value for "video_edit_list", must be one of #{validator.allowable_values}.'
      end
      @video_edit_list = video_edit_list
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] audio_edit_list Object to be assigned
    def audio_edit_list=(audio_edit_list)
      validator = EnumAttributeValidator.new('String', ['non-standard'])
      unless validator.valid?(audio_edit_list)
        fail ArgumentError, 'invalid value for "audio_edit_list", must be one of #{validator.allowable_values}.'
      end
      @audio_edit_list = audio_edit_list
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unexpected_media_file_parameters Object to be assigned
    def unexpected_media_file_parameters=(unexpected_media_file_parameters)
      validator = EnumAttributeValidator.new('String', ['non-standard'])
      unless validator.valid?(unexpected_media_file_parameters)
        fail ArgumentError, 'invalid value for "unexpected_media_file_parameters", must be one of #{validator.allowable_values}.'
      end
      @unexpected_media_file_parameters = unexpected_media_file_parameters
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          video_codec == o.video_codec &&
          audio_codec == o.audio_codec &&
          video_gop_size == o.video_gop_size &&
          video_frame_rate == o.video_frame_rate &&
          video_resolution == o.video_resolution &&
          pixel_aspect_ratio == o.pixel_aspect_ratio &&
          video_edit_list == o.video_edit_list &&
          audio_edit_list == o.audio_edit_list &&
          unexpected_media_file_parameters == o.unexpected_media_file_parameters
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [video_codec, audio_codec, video_gop_size, video_frame_rate, video_resolution, pixel_aspect_ratio, video_edit_list, audio_edit_list, unexpected_media_file_parameters].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        MuxRuby.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
