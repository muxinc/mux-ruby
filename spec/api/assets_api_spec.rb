=begin
# Mux Ruby - Copyright 2019 Mux Inc.
# NOTE: This file is auto generated. Do not edit this file manually.
=end

require 'spec_helper'
require 'json'

# Unit tests for MuxRuby::AssetsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AssetsApi' do
  before do
    # run before each test
    @instance = MuxRuby::AssetsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AssetsApi' do
    it 'should create an instance of AssetsApi' do
      expect(@instance).to be_instance_of(MuxRuby::AssetsApi)
    end
  end

  # unit tests for create_asset
  # Create an asset
  # Create a new Mux Video asset. 
  # @param create_asset_request 
  # @param [Hash] opts the optional parameters
  # @return [AssetResponse]
  describe 'create_asset test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_asset_playback_id
  # Create a playback ID
  # @param asset_id The asset ID.
  # @param create_playback_id_request 
  # @param [Hash] opts the optional parameters
  # @return [CreatePlaybackIDResponse]
  describe 'create_asset_playback_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_asset_track
  # Create an asset track
  # @param asset_id The asset ID.
  # @param create_track_request 
  # @param [Hash] opts the optional parameters
  # @return [CreateTrackResponse]
  describe 'create_asset_track test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_asset
  # Delete an asset
  # @param asset_id The asset ID.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_asset test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_asset_playback_id
  # Delete a playback ID
  # @param asset_id The asset ID.
  # @param playback_id The live stream&#39;s playback ID.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_asset_playback_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_asset_track
  # Delete an asset track
  # @param asset_id The asset ID.
  # @param track_id The track ID.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_asset_track test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset
  # Retrieve an asset
  # Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
  # @param asset_id The asset ID.
  # @param [Hash] opts the optional parameters
  # @return [AssetResponse]
  describe 'get_asset test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_input_info
  # Retrieve asset input info
  # Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
  # @param asset_id The asset ID.
  # @param [Hash] opts the optional parameters
  # @return [GetAssetInputInfoResponse]
  describe 'get_asset_input_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_asset_playback_id
  # Retrieve a playback ID
  # @param asset_id The asset ID.
  # @param playback_id The live stream&#39;s playback ID.
  # @param [Hash] opts the optional parameters
  # @return [GetAssetPlaybackIDResponse]
  describe 'get_asset_playback_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_assets
  # List assets
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of items to include in the response
  # @option opts [Integer] :page Offset by this many pages, of the size of &#x60;limit&#x60;
  # @return [ListAssetsResponse]
  describe 'list_assets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_asset_master_access
  # Update master access
  # Allows you add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
  # @param asset_id The asset ID.
  # @param update_asset_master_access_request 
  # @param [Hash] opts the optional parameters
  # @return [AssetResponse]
  describe 'update_asset_master_access test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_asset_mp4_support
  # Update MP4 support
  # Allows you add or remove mp4 support for assets that were created without it. Currently there are two values supported in this request, &#x60;standard&#x60; and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
  # @param asset_id The asset ID.
  # @param update_asset_mp4_support_request 
  # @param [Hash] opts the optional parameters
  # @return [AssetResponse]
  describe 'update_asset_mp4_support test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
